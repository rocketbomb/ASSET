// <auto-generated />
using ASSET.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace ASSET.Data.Migrations
{
    [DbContext(typeof(ASSETContext))]
    partial class ASSETContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ASSET.Models.Master.AssetCategory", b =>
                {
                    b.Property<int>("AssetCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssetDetailId");

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("AssetCategoryId");

                    b.HasIndex("AssetDetailId")
                        .IsUnique()
                        .HasFilter("[AssetDetailId] IS NOT NULL");

                    b.ToTable("AssetCategory");
                });

            modelBuilder.Entity("ASSET.Models.Master.AssetDetail", b =>
                {
                    b.Property<int>("AssetDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Barcode");

                    b.Property<string>("Brand");

                    b.Property<string>("Code");

                    b.Property<string>("Color");

                    b.Property<int?>("GroupAssetGroupId");

                    b.Property<string>("Model");

                    b.Property<string>("NameEng");

                    b.Property<string>("NameThai");

                    b.Property<string>("OldCode");

                    b.Property<string>("SerialNo");

                    b.Property<string>("Size");

                    b.Property<int?>("TypeAssetTypeId");

                    b.Property<int?>("UnitAssetUnitId");

                    b.HasKey("AssetDetailId");

                    b.HasIndex("GroupAssetGroupId")
                        .IsUnique()
                        .HasFilter("[GroupAssetGroupId] IS NOT NULL");

                    b.HasIndex("TypeAssetTypeId")
                        .IsUnique()
                        .HasFilter("[TypeAssetTypeId] IS NOT NULL");

                    b.HasIndex("UnitAssetUnitId")
                        .IsUnique()
                        .HasFilter("[UnitAssetUnitId] IS NOT NULL");

                    b.ToTable("AssetDetail");
                });

            modelBuilder.Entity("ASSET.Models.Master.AssetGroup", b =>
                {
                    b.Property<int>("AssetGroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AssetId");

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("AssetGroupId");

                    b.ToTable("AssetGroup");
                });

            modelBuilder.Entity("ASSET.Models.Master.AssetMaster", b =>
                {
                    b.Property<int>("AssetMasterId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssetDetailId");

                    b.Property<int?>("AssetWarrantyId");

                    b.HasKey("AssetMasterId");

                    b.HasIndex("AssetDetailId");

                    b.HasIndex("AssetWarrantyId");

                    b.ToTable("AssetMaster");
                });

            modelBuilder.Entity("ASSET.Models.Master.AssetType", b =>
                {
                    b.Property<int>("AssetTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("AssetTypeId");

                    b.ToTable("AssetType");
                });

            modelBuilder.Entity("ASSET.Models.Master.AssetUnit", b =>
                {
                    b.Property<int>("AssetUnitId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("AssetUnitId");

                    b.ToTable("AssetUnit");
                });

            modelBuilder.Entity("ASSET.Models.Master.AssetWarranty", b =>
                {
                    b.Property<int>("AssetWarrantyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("ContractNumber");

                    b.Property<string>("InvoiceNumber");

                    b.Property<string>("PolicyNumber");

                    b.Property<double>("Premium");

                    b.Property<string>("Remark");

                    b.Property<int>("SupplierId");

                    b.Property<string>("Telphone");

                    b.Property<string>("VoucherNumber");

                    b.Property<int?>("WarrantyCompanyAssetWarrantyCompanyId");

                    b.Property<string>("WarrantyDuration");

                    b.Property<DateTime>("WarrantyEnd");

                    b.Property<DateTime>("WarrantyStart");

                    b.HasKey("AssetWarrantyId");

                    b.HasIndex("WarrantyCompanyAssetWarrantyCompanyId")
                        .IsUnique()
                        .HasFilter("[WarrantyCompanyAssetWarrantyCompanyId] IS NOT NULL");

                    b.ToTable("AssetWarranty");
                });

            modelBuilder.Entity("ASSET.Models.Master.AssetWarrantyCompany", b =>
                {
                    b.Property<int>("AssetWarrantyCompanyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Code");

                    b.Property<string>("ContactNumber");

                    b.Property<string>("ContactPerson");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.HasKey("AssetWarrantyCompanyId");

                    b.ToTable("AssetWarrantyCompany");
                });

            modelBuilder.Entity("ASSET.Models.Master.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Code");

                    b.Property<string>("ContactNumber");

                    b.Property<string>("ContactPerson");

                    b.Property<string>("Email");

                    b.Property<int?>("MajorEmployeeMajorId");

                    b.Property<string>("Name");

                    b.HasKey("EmployeeId");

                    b.HasIndex("MajorEmployeeMajorId")
                        .IsUnique()
                        .HasFilter("[MajorEmployeeMajorId] IS NOT NULL");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("ASSET.Models.Master.EmployeeFaculty", b =>
                {
                    b.Property<int>("EmployeeFacultyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<int?>("MajorEmployeeMajorId");

                    b.Property<string>("Name");

                    b.HasKey("EmployeeFacultyId");

                    b.HasIndex("MajorEmployeeMajorId");

                    b.ToTable("EmployeeFaculty");
                });

            modelBuilder.Entity("ASSET.Models.Master.EmployeeMajor", b =>
                {
                    b.Property<int>("EmployeeMajorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("EmployeeMajorId");

                    b.ToTable("EmployeeMajor");
                });

            modelBuilder.Entity("ASSET.Models.Master.EmployeeUniversity", b =>
                {
                    b.Property<int>("EmployeeUniversityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<int?>("FacultyEmployeeFacultyId");

                    b.Property<string>("NameEng");

                    b.Property<string>("NameThai");

                    b.HasKey("EmployeeUniversityId");

                    b.HasIndex("FacultyEmployeeFacultyId");

                    b.ToTable("EmployeeUniversity");
                });

            modelBuilder.Entity("ASSET.Models.Master.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Code");

                    b.Property<string>("ContactNumber");

                    b.Property<string>("ContactPerson");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.HasKey("SupplierId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("ASSET.Models.Master.AssetCategory", b =>
                {
                    b.HasOne("ASSET.Models.Master.AssetDetail", "AssetDetail")
                        .WithOne("Category")
                        .HasForeignKey("ASSET.Models.Master.AssetCategory", "AssetDetailId");
                });

            modelBuilder.Entity("ASSET.Models.Master.AssetDetail", b =>
                {
                    b.HasOne("ASSET.Models.Master.AssetGroup", "Group")
                        .WithOne("AssetDetail")
                        .HasForeignKey("ASSET.Models.Master.AssetDetail", "GroupAssetGroupId");

                    b.HasOne("ASSET.Models.Master.AssetType", "Type")
                        .WithOne("AssetDetail")
                        .HasForeignKey("ASSET.Models.Master.AssetDetail", "TypeAssetTypeId");

                    b.HasOne("ASSET.Models.Master.AssetUnit", "Unit")
                        .WithOne("AssetDetail")
                        .HasForeignKey("ASSET.Models.Master.AssetDetail", "UnitAssetUnitId");
                });

            modelBuilder.Entity("ASSET.Models.Master.AssetMaster", b =>
                {
                    b.HasOne("ASSET.Models.Master.AssetDetail", "AssetDetail")
                        .WithMany()
                        .HasForeignKey("AssetDetailId");

                    b.HasOne("ASSET.Models.Master.AssetWarranty", "AssetWarranty")
                        .WithMany()
                        .HasForeignKey("AssetWarrantyId");
                });

            modelBuilder.Entity("ASSET.Models.Master.AssetWarranty", b =>
                {
                    b.HasOne("ASSET.Models.Master.AssetWarrantyCompany", "WarrantyCompany")
                        .WithOne("AssetWarranty")
                        .HasForeignKey("ASSET.Models.Master.AssetWarranty", "WarrantyCompanyAssetWarrantyCompanyId");
                });

            modelBuilder.Entity("ASSET.Models.Master.Employee", b =>
                {
                    b.HasOne("ASSET.Models.Master.EmployeeMajor", "Major")
                        .WithOne("Employee")
                        .HasForeignKey("ASSET.Models.Master.Employee", "MajorEmployeeMajorId");
                });

            modelBuilder.Entity("ASSET.Models.Master.EmployeeFaculty", b =>
                {
                    b.HasOne("ASSET.Models.Master.EmployeeMajor", "Major")
                        .WithMany()
                        .HasForeignKey("MajorEmployeeMajorId");
                });

            modelBuilder.Entity("ASSET.Models.Master.EmployeeUniversity", b =>
                {
                    b.HasOne("ASSET.Models.Master.EmployeeFaculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyEmployeeFacultyId");
                });
#pragma warning restore 612, 618
        }
    }
}
